import asyncio
import aiohttp
import os
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
AIRPORTS_API_KEY = os.getenv("AIRPORTS_API_KEY")
MOUNTAIN_API_KEY = os.getenv("MOUNTAIN_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN or not AIRPORTS_API_KEY or not MOUNTAIN_API_KEY:
    raise ValueError("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN, AIRPORTS_API_KEY –∏ MOUNTAIN_API_KEY –∑–∞–¥–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞—Ö
async def fetch_airport_data(search_query):
    url = "https://airports.p.rapidapi.com/v1/airports"
    headers = {
        "Content-Type": "application/json",
        "X-RapidAPI-Key": AIRPORTS_API_KEY,
        "X-RapidAPI-Host": "airports.p.rapidapi.com"
    }
    payload = {"search": search_query}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    print(f"–û—à–∏–±–∫–∞ API –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: {response.status} - {await response.text()}")
                    return None
    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–∞—Ö
async def fetch_mountain_data(mountain_name):
    url = f"https://mountain-api1.p.rapidapi.com/api/mountains?name={mountain_name}"
    headers = {
        "X-RapidAPI-Key": MOUNTAIN_API_KEY,
        "X-RapidAPI-Host": "mountain-api1.p.rapidapi.com"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"API Response: {data}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç API
                    return data
                else:
                    print(f"–û—à–∏–±–∫–∞ API –≥–æ—Ä: {response.status} - {await response.text()}")
                    return None
    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API –≥–æ—Ä: {e}")
        return None



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞
async def airport_handler(message: Message):
    search_query = message.text.replace("/airport", "").strip()
    if not search_query:
        await message.answer("‚úàÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /airport.")
        return

    data = await fetch_airport_data(search_query)
    if not data or not isinstance(data, list):
        await message.answer("‚úàÔ∏è–ê—ç—Ä–æ–ø–æ—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    response = []
    for airport in data:
        info = (
            f"\u2708\ufe0f <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {airport.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"<b>–ö–æ–¥ IATA:</b> {airport.get('iata', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–ì–æ—Ä–æ–¥:</b> {airport.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"<b>–°—Ç—Ä–∞–Ω–∞:</b> {airport.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"<b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {airport.get('tz', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–®–∏—Ä–æ—Ç–∞:</b> {airport.get('lat', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–î–æ–ª–≥–æ—Ç–∞:</b> {airport.get('lon', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        )
        response.append(info)

    await message.answer("\n\n".join(response), parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /airport –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞ –∏–ª–∏ /mountain –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä—ã.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä—ã
async def mountain_handler(message: Message):
    mountain_name = message.text.replace("/mountain", "").strip()
    if not mountain_name:
        await message.answer("üèîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /mountain.")
        return

    data = await fetch_mountain_data(mountain_name)
    if not data:
        await message.answer("‚ùå –ì–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
        return

    # –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞:
    response = (
        f"‚õ∞Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–í—ã—Å–æ—Ç–∞:</b> {data.get('altitude', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"<b>–ü–µ—Ä–≤–∞—è —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è:</b> {data.get('first_climbed_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} "
        f"({data.get('first_climber', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})\n"
    )
    photo_url = data.get("mountain_img", None)

    if photo_url:
        await message.answer_photo(photo=photo_url, caption=response, parse_mode="HTML")
    else:
        await message.answer(response, parse_mode="HTML")



# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start_handler, Command("start"))
    dp.message.register(airport_handler, Command("airport"))
    dp.message.register(mountain_handler, Command("mountain"))

    await dp.start_polling(bot)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())









